#re-order levels
cardioDataCalEurosc_II$Payer  <- gsub('2', '0', cardioDataCalEurosc_II$Payer)
unique(cardioDataCalEurosc_II$Payer)
cardioDataCalEurosc_II$Payer <- as.numeric(as.character(cardioDataCalEurosc_II$Payer))
unique(cardioDataCalEurosc_II$Payer)
unique(cardioDataCalEurosc_II$Payer)
unique(cardioDataCalEurosc_II$CardiogenicShock)
unique(cardioDataCalEurosc_II$IntervalMI)
#re-order levels
cardioDataCalEurosc_II$IntervalMI  <- gsub('1', '7', cardioDataCalEurosc_II$IntervalMI)  #7 is temp
cardioDataCalEurosc_II$IntervalMI  <- gsub('4', '1', cardioDataCalEurosc_II$IntervalMI)
unique(cardioDataCalEurosc_II$IntervalMI)
cardioDataCalEurosc_II$IntervalMI  <- gsub('7', '4', cardioDataCalEurosc_II$IntervalMI)
unique(cardioDataCalEurosc_II$IntervalMI)
cardioDataCalEurosc_II$IntervalMI  <- gsub('2', '10', cardioDataCalEurosc_II$IntervalMI)
unique(cardioDataCalEurosc_II$IntervalMI)
cardioDataCalEurosc_II$IntervalMI  <- gsub('3', '2', cardioDataCalEurosc_II$IntervalMI)
unique(cardioDataCalEurosc_II$IntervalMI)
cardioDataCalEurosc_II$IntervalMI  <- gsub('10', '3', cardioDataCalEurosc_II$IntervalMI)
unique(cardioDataCalEurosc_II$IntervalMI)
cardioDataCalEurosc_II$IntervalMI <- as.numeric(as.character(cardioDataCalEurosc_II$IntervalMI))
unique(cardioDataCalEurosc_II$IntervalMI)
unique(cardioDataCalEurosc_II$PreopAF)
unique(cardioDataCalEurosc_II$PreopVFT)
unique(cardioDataCalEurosc_II$PreopCHB.pacing)
unique(cardioDataCalEurosc_II$LMS)
unique(cardioDataCalEurosc_II$LMS)
unique(cardioDataCalEurosc_II$LMS)
unique(cardioDataCalEurosc_II$PumpCase)
cardioDataCalEurosc_II$PumpCase[is.na(cardioDataCalEurosc_II$PumpCase)] = 0
unique(cardioDataCalEurosc_II$PumpCase)
unique(cardioDataCalEurosc_II$PCI)
unique(cardioDataCalEurosc_II$PCI)
unique(cardioDataCalEurosc_II$PCI)
unique(cardioDataCalEurosc_II$PCI)
unique(cardioDataCalEurosc_II$PCI)
#re-order levels
cardioDataCalEurosc_II$PCI  <- gsub('1', '7', cardioDataCalEurosc_II$PCI)  #7 is temp
unique(cardioDataCalEurosc_II$PCI)
cardioDataCalEurosc_II$PCI  <- gsub('3', '1', cardioDataCalEurosc_II$PCI)
unique(cardioDataCalEurosc_II$PCI)
cardioDataCalEurosc_II$PCI  <- gsub('7', '3', cardioDataCalEurosc_II$PCI)
unique(cardioDataCalEurosc_II$PCI)
cardioDataCalEurosc_II$PCI <- as.numeric(as.character(cardioDataCalEurosc_II$PCI))
unique(cardioDataCalEurosc_II$PCI)
unique(cardioDataCalEurosc_II$Smoking)
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
sum(is.na(cardioDataCalEurosc_II$FirstOperatorGrade))
table(cardioDataCalEurosc_II$FirstOperatorGrade)
#re-order levels
cardioDataCalEurosc_II$FirstOperatorGrade  <- gsub('1', '7', cardioDataCalEurosc_II$FirstOperatorGrade)  #7 is temp
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
cardioDataCalEurosc_II$FirstOperatorGrade  <- gsub('2', '1', cardioDataCalEurosc_II$FirstOperatorGrade)  #7 is temp
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
cardioDataCalEurosc_II$FirstOperatorGrade  <- gsub('3', '2', cardioDataCalEurosc_II$FirstOperatorGrade)  #7 is temp
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
cardioDataCalEurosc_II$FirstOperatorGrade  <- gsub('4', '3', cardioDataCalEurosc_II$FirstOperatorGrade)  #7 is temp
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
cardioDataCalEurosc_II$FirstOperatorGrade  <- gsub('7', '0', cardioDataCalEurosc_II$FirstOperatorGrade)  #7 is temp
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
cardioDataCalEurosc_II$FirstOperatorGrade[is.na(cardioDataCalEurosc_II$FirstOperatorGrade)] <- 0
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
cardioDataCalEurosc_II$FirstOperatorGrade <- as.numeric(as.character(cardioDataCalEurosc_II$FirstOperatorGrade))
unique(cardioDataCalEurosc_II$FirstOperatorGrade)
unique(cardioDataCalEurosc_II$HospCode)
#store backup version for later ordinal conversion
HospCode <- cardioDataCalEurosc_II$HospCode
unclass(cardioDataCalEurosc_II$HospCode)
unclass(factor(cardioDataCalEurosc_II$HospCode))
cardioDataCalEurosc_II$HospCode <- unclass(factor(cardioDataCalEurosc_II$HospCode))
unique(cardioDataCalEurosc_II$HospCode)
sort(unique(cardioDataCalEurosc_II$HospCode))
write.csv(cardioDataCalEurosc_II, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/expandESII_DtMon_randPreproc_OrdinalCentre.csv")
cardioDataCalEurosc_II$Year
#Split into training and test
cardioDataCalEurosc_II_Train_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2012:2016), ]
cardioDataCalEurosc_II_Test_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2017:2019), ]
nrow(cardioDataCalEurosc_II_Train_newData)  #157196
nrow(cardioDataCalEurosc_II_Test_newData)   #69891
head(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
tail(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
write.csv(cardioDataCalEurosc_II_Train_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/mixedEffects/mixedEffects/expandES_II_Month_preProcessed_training_2012_2016.csv")
write.csv(cardioDataCalEurosc_II_Train_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/mixedEffects/expandES_II_Month_preProcessed_training_2012_2016.csv")
write.csv(cardioDataCalEurosc_II_Test_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/mixedEffects/2017_2019/expandES_II_Month_preProcessed_test_2017_2019.csv")
HospCode
#assign back coded string versions
cardioDataCalEurosc_II$HospCode <- HospCode
cardioDataCalEurosc_II <- cardioDataCalEurosc_II %>% mutate(value = 1)  %>% spread(HospCode, value,  fill = 0 )
require(tidyr)
require(dplyr)
cardioDataCalEurosc_II <- cardioDataCalEurosc_II %>% mutate(value = 1)  %>% spread(HospCode, value,  fill = 0 )
colnames(cardioDataCalEurosc_II)
write.csv(cardioDataCalEurosc_II, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/hotencodeCentre/expandESII_DtMon_randPreproc_hotEncCentre.csv")
#Split into training and test
cardioDataCalEurosc_II_Train_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2012:2016), ]
cardioDataCalEurosc_II_Test_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2017:2019), ]
nrow(cardioDataCalEurosc_II_Train_newData)  #157196
nrow(cardioDataCalEurosc_II_Test_newData)   #69891
head(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
tail(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
write.csv(cardioDataCalEurosc_II_Train_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/hotencodeCentre/2012_2016/expandES_II_Month_preProcessed_training_2012_2016_hotE.csv")
write.csv(cardioDataCalEurosc_II_Test_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/hotencodeCentre/2017_2019/expandES_II_Month_preProcessed_test_2017_2019_hotE.csv")
cardioDataCalEurosc_II <- fread(file="C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/mixedEffects/expandESII_DtMon_randPreproc_OrdinalCentre.csv", data.table=F)
colnames(cardioDataCalEurosc_II)
write.csv(cardioDataCalEurosc_II, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/withoutCentre/expandESII_DtMon_randPreproc_noCentre.csv")
#Split into training and test
cardioDataCalEurosc_II_Train_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2012:2016), ]
cardioDataCalEurosc_II_Test_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2017:2019), ]
nrow(cardioDataCalEurosc_II_Train_newData)  #157196
nrow(cardioDataCalEurosc_II_Test_newData)   #69891
head(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
tail(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
write.csv(cardioDataCalEurosc_II_Train_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/withoutCentre/2012_2016/expandES_II_Month_preProcessed_training_2012_2016_noCentre.csv")
write.csv(cardioDataCalEurosc_II_Test_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/withoutCentre/2017_2019/expandES_II_Month_preProcessed_test_2017_2019_noCentre.csv")
cardioDataCalEurosc_II <- fread(file="C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/mixedEffects/expandESII_DtMon_randPreproc_OrdinalCentre.csv", data.table=F)
colnames(cardioDataCalEurosc_II)
cardioDataCalEurosc_II$HospCode <- NULL
colnames(cardioDataCalEurosc_II)
write.csv(cardioDataCalEurosc_II, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/withoutCentre/expandESII_DtMon_randPreproc_noCentre.csv")
#Split into training and test
cardioDataCalEurosc_II_Train_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2012:2016), ]
cardioDataCalEurosc_II_Test_newData <- cardioDataCalEurosc_II[cardioDataCalEurosc_II$Year %in% c(2017:2019), ]
nrow(cardioDataCalEurosc_II_Train_newData)  #157196
nrow(cardioDataCalEurosc_II_Test_newData)   #69891
head(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
tail(cardioDataCalEurosc_II_Test_newData$ES_II_link_ID)
write.csv(cardioDataCalEurosc_II_Train_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/withoutCentre/2012_2016/expandES_II_Month_preProcessed_training_2012_2016_noCentre.csv")
write.csv(cardioDataCalEurosc_II_Test_newData, file = "C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/withoutCentre/2017_2019/expandES_II_Month_preProcessed_test_2017_2019_noCentre.csv")
cardioDataCalEurosc_II <- fread(file="C:/Users/qiani/Documents/ADB role university/Euroscore_expansion/mixedEffects/expandESII_DtMon_randPreproc_OrdinalCentre.csv", data.table=F)
library(DataExplorer)
create_report(cardioDataCalEurosc_II)
colnames(cardioDataCalEurosc_II)
unique(cardioDataCalEurosc_II$PVD)
unique(cardioDataCalEurosc_II$PCI)
nrow(cardioDataCalEurosc_II)
sum(is.na(cardioDataCalEurosc_II$mtly))  #4244
sum(cardioDataCalEurosc_II$mtly)
nrow(cardioDataCalEurosc_II) - sum(cardioDataCalEurosc_II$mtly)
library("sparsebn")
install.packages("sparsebn")
library(Rtools)
library(data.table)
library(Rtools)
library(Rtools)
install.packages("Rtools")
install.packages("sparsebn")
library(randomforest)
library(randomForest)
#Synthprop
library("synthpop")
#Synthprop
library("synthpop")
library(data.table)
train_prod_7 <- fread(file="PreprocessNoPosteriorData/SmallGeneticMassSpecSpectraOnly_TRAIN.csv", data.table = F)
nrow(train_prod_7)
head(train_prod_7)
# Separate out positive and negative records
positive <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 1, ]
negative <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 0, ]
dim(positive)  #59 x 3410
dim(negative)  #43 x 3410
library(FNN)
#note here that the neighbors are trained on the negative (non-positive data)
KNN_Model = knn(negative[1:(length(negative)-1)],positive[1:(length(positive)-1)],negative$`Beta-lactamPhenoFamily`,k=5)
nn_idx <- attr(KNN_Model, "nn.index")
#index back to the negative subset
nearest_neighbors_neg <- negative[nn_idx, ]  #295 neighbours - the number is larger than sample size due to duplicate neighbours
#oversample positive, then vertically concatenate with negative neigbhours then oversample again
oversample_pos <- rbind(positive, positive, positive, positive, positive)  #59 x 5 = 295
pos_neg_overample <- rbind(oversample_pos, nearest_neighbors_neg)
#no need for this, only useful for neural network which need large number of samples
#train_prod_7_oversample <- rbind(pos_neg_overample, pos_neg_overample, pos_neg_overample, pos_neg_overample, pos_neg_overample)
dim(pos_neg_overample)  #590 x 3410
library(data.table)
train_prod_7 <- fread(file="PreprocessNoPosteriorData/SmallGeneticMassSpecSpectraOnly_TRAIN.csv", data.table = F)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(data.table)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(data.table)
train_prod_7 <- fread(file="PreprocessNoPosteriorData/SmallGeneticMassSpecSpectraOnly_TRAIN.csv", data.table = F)
nrow(train_prod_7)
head(train_prod_7)
# Separate out positive and negative records
positive <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 1, ]
negative <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 0, ]
dim(positive)  #59 x 3410
dim(negative)  #43 x 3410
library(FNN)
#note here that the neighbors are trained on the negative (non-positive data)
KNN_Model = knn(negative[1:(length(negative)-1)],positive[1:(length(positive)-1)],negative$`Beta-lactamPhenoFamily`,k=5)
nn_idx <- attr(KNN_Model, "nn.index")
#index back to the negative subset
nearest_neighbors_neg <- negative[nn_idx, ]  #295 neighbours - the number is larger than sample size due to duplicate neighbours
#oversample positive, then vertically concatenate with negative neigbhours then oversample again
oversample_pos <- rbind(positive, positive, positive, positive, positive)  #59 x 5 = 295
pos_neg_overample <- rbind(oversample_pos, nearest_neighbors_neg)
dim(pos_neg_overample)  #590 x 3410
#Synthprop
library("synthpop")
pos_neg_overample
my.seed <- 7
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn(pos_neg_overample, seed = my.seed)
#remember that it generates samples of same size as N samples size
sds.default <- syn(pos_neg_overample, seed = my.seed, proper = T)
#remember that it generates samples of same size as N samples size
sds.default <- syn(pos_neg_overample, seed = my.seed, proper = T, method = "random forests")
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample, seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample, colnames(pos_neg_overample), colnames(pos_neg_overample), seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample, colnames(pos_neg_overample), seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample, colnames(pos_neg_overample), colnames(pos_neg_overample), seed = my.seed, proper = T, ntree = 10)
colnames(pos_neg_overample)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample, pos_neg_overample, pos_neg_overample, seed = my.seed, proper = T, ntree = 10)
sds.default <- syn.strata(pos_neg_overample, seed = my.seed)
sds.default <- syn.strata(pos_neg_overample, seed = my.seed, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default
sds.default <- syn.strata(pos_neg_overample, seed = my.seed, minstratumsize=500 strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata(pos_neg_overample, seed = my.seed, minstratumsize=500, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata(pos_neg_overample, seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample, pos_neg_overample, minstratumsize=200, pos_neg_overample, seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample, pos_neg_overample, minstratumsize=200, pos_neg_overample, seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample, pos_neg_overample, seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(colnames(pos_neg_overample), pos_neg_overample, pos_neg_overample, seed = my.seed, proper = T, ntree = 10)
colnames(pos_neg_overample)
pos_neg_overample.T
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(colnames(pos_neg_overample), t(pos_neg_overample), t(pos_neg_overample), seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(colnames(pos_neg_overample), t(pos_neg_overample), t(pos_neg_overample), smoothing = "", seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(colnames(pos_neg_overample), t(pos_neg_overample), t(pos_neg_overample), smoothing = "", seed = my.seed, proper = FALSE, ntree = 10)
colnames(pos_neg_overample)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(as.vector(colnames(pos_neg_overample)), t(pos_neg_overample), t(pos_neg_overample), smoothing = "", seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample, pos_neg_overample, smoothing = "", seed = my.seed, proper = T, ntree = 10)
pos_neg_overample[1:(length(pos_neg_overample)-1)]
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample[1:(length(pos_neg_overample)-1)], pos_neg_overample[1:(length(pos_neg_overample)-1)], smoothing = "", seed = my.seed, proper = T, ntree = 10)
pos_neg_overample[1:(length(pos_neg_overample)-1)]
class(pos_neg_overample[1:(length(pos_neg_overample)-1)])
#remember that it generates samples of same size as N samples size
sds.default <- syn.rf(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample[1:(length(pos_neg_overample)-1)], pos_neg_overample[1:(length(pos_neg_overample)-1)], smoothing = "", seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.ctree(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample[1:(length(pos_neg_overample)-1)], pos_neg_overample[1:(length(pos_neg_overample)-1)], smoothing = "", seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.cart(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample[1:(length(pos_neg_overample)-1)], pos_neg_overample[1:(length(pos_neg_overample)-1)], smoothing = "", seed = my.seed, proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.cart(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample[1:(length(pos_neg_overample)-1)], pos_neg_overample[1:(length(pos_neg_overample)-1)], smoothing = "", proper = T, ntree = 10)
#remember that it generates samples of same size as N samples size
sds.default <- syn.cart(pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample[1:(length(pos_neg_overample)-1)], pos_neg_overample[1:(length(pos_neg_overample)-1)], smoothing = "", proper = T)
sds.default
sds.default$res
sds.default <- syn.cart(pos_neg_overample, pos_neg_overample$`Beta-lactamPhenoFamily`, pos_neg_overample$`Beta-lactamPhenoFamily`, smoothing = "", proper = T)
sds.default <- syn.cart(pos_neg_overample, pos_neg_overample, pos_neg_overample, smoothing = "", proper = T)
sds.default <- syn.strata(pos_neg_overample, method=syn.rf, seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata(pos_neg_overample, method='syn.rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default
my.seed <- 7
sds.default <- syn.strata(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata(pos_neg_overample, method='cart', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source('syn_strata.R')
sds.default <- syn_strata(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source('syn_strata.R')
syn_strata
syn_strata()
source('syn_strata.R')
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source('syn_strata.R')
my.seed <- 7
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
#Synthprop
library("synthpop")
source('syn_strata.R')
my.seed <- 7
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source('syn_strata.R')
my.seed <- 7
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source('syn_strata.R')
syn.strata2
syn.strata2()
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata2(pos_neg_overample, method='cart', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata2(pos_neg_overample, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata2(pos_neg_overample, strata=pos_neg_overample$`Beta-lactamPhenoFamily`, minstratumsize=200)
sds.default <- syn.strata2(pos_neg_overample, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
sds.default <- syn.strata2(pos_neg_overample)
syn.strata2
source('syn_strata.R')
my.seed <- 7
syn.strata2
source('syn_strata.R')
syn.strata2
source('syn_strata.R')
syn.strata2()
source('syn_strata.R')
source('syn_strata.R')
syn.strata2
source('syn_strata.R')
syn.strata3
source('syn_strata.R')
syn.strata3
source('syn_strata2.R')
syn.strata3
source('syn_strata2.R')
syn.strata3
source('syn_strata2.r')
syn.strata3
rm(list=ls())
source('syn_strata2.r')
syn.strata2
history(Inf)
library(FNN)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(data.table)
train_prod_7 <- fread(file="PreprocessNoPosteriorData/SmallGeneticMassSpecSpectraOnly_TRAIN.csv", data.table = F)
nrow(train_prod_7)
head(train_prod_7)
nrow(train_prod_7)
head(train_prod_7)
# Separate out positive and negative records
positive <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 1]
negative <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 0]
positive
negative
# Separate out positive and negative records
positive <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 1, ]
dim(positive)
dim(negative)
dim(negative) #102 x 1440
negative <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 0]
dim(positive) #59 x 3410
dim(negative) #102 x 1440
nrow(train_prod_7)
head(train_prod_7)
# Separate out positive and negative records
positive <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 1]
negative <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 0]
dim(positive) #59 x 3410
dim(negative) #102 x 1440
# Separate out positive and negative records
positive <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 1,]
negative <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 0,]
dim(positive) #59 x 3410
dim(negative) #102 x 1440
KNN_Model = knn(negative[1:(length(negative)-1)],positive[1:(length(positive)-1)],negative$`Beta-lactamPhenoFamily`,k=5)
nn_idx <- attr(KNN_Model, "nn.index")
nn_idx
#index back to the negative subset
nearest_neighbors <- negative[nn_idx, ]  #295 neighbours - the number is larger than sample size due to duplicate neighbours
nearest_neighbors
dim(positive)
dim(negative)
dim(nearest_neighbors)
View(positive)
#oversample positive, then vertically concatenate with negative neigbhours then oversample again
oversample_pos <- rbind(positive, positive, positive, positive, positive)  #59 x 5 = 295
#index back to the negative subset
nearest_neighbors_neg <- negative[nn_idx, ]  #295 neighbours - the number is larger than sample size due to duplicate neighbours
dim(nearest_neighbors_neg)
#oversample positive, then vertically concatenate with negative neigbhours then oversample again
oversample_pos <- rbind(positive, positive, positive, positive, positive)  #59 x 5 = 295
oversample_pos
pos_neg_overample <- rbind(oversample_pos, nearest_neighbors_neg)
dim(pos_neg_overample)  #2950 x 3410
dim(pos_neg_overample)  #590 x 3410
pos_neg_overample
#Synthprop
library("synthpop")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("syn_strata2.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("syn2.r")
#Synthprop
library("synthpop")
source("syn_strata2.r")
source("syn2.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
library(stringr)
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("functions.syn2.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("padMis.syn.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("padMis.syn.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("padMis.syn.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("functions.syn2.r")
source("padMis.syn.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("padMis.syn.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("padModel.syn.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
source("sampler.syn2.r")
source("sampler.syn2.r")
source("sampler.syn2.r")
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
library(randomForest)
my.seed <- 7
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
#Rename class as y since this is required for formula in randomForest y ~ .
names(pos_neg_overample)[names(pos_neg_overample) == 'Beta-lactamPhenoFamily'] <- 'y'
names(pos_neg_overample)
library(FNN)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(data.table)
train_prod_7 <- fread(file="PreprocessNoPosteriorData/SmallGeneticMassSpecSpectraOnly_TRAIN.csv", data.table = F)
nrow(train_prod_7)
head(train_prod_7)
# Separate out positive and negative records
positive <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 1,]
negative <- train_prod_7[train_prod_7$`Beta-lactamPhenoFamily` == 0,]
dim(positive) #59 x 3410
dim(negative) #43 x 3410
KNN_Model = knn(negative[1:(length(negative)-1)],positive[1:(length(positive)-1)],negative$`Beta-lactamPhenoFamily`,k=5)
nn_idx <- attr(KNN_Model, "nn.index")
#index back to the negative subset
nearest_neighbors_neg <- negative[nn_idx, ]  #295 neighbours - the number is larger than sample size due to duplicate neighbours
dim(nearest_neighbors_neg)
#oversample positive, then vertically concatenate with negative neigbhours then oversample again
oversample_pos <- rbind(positive, positive, positive, positive, positive)  #59 x 5 = 295
pos_neg_overample <- rbind(oversample_pos, nearest_neighbors_neg)
dim(pos_neg_overample)  #590 x 3410
colnames(pos_neg_overample)
colnames(pos_neg_overample) == 'Beta-lactamPhenoFamily'
#Rename class as y since this is required for formula in randomForest y ~ .
colnames(pos_neg_overample)[colnames(pos_neg_overample) == 'Beta-lactamPhenoFamily'] <- 'y'
pos_neg_overample$y
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
pos_neg_overample
#Synthprop
library("synthpop")
source("syn_strata2.r")
source("syn2.r")
library(stringr)
source("functions.syn2.r")
source("padMis.syn.r")
source("padModel.syn.r")
source("sampler.syn2.r")
library(randomForest)
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$`Beta-lactamPhenoFamily`)
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$y)
rf.fit <- randomForest(y ~ ., data = pos_neg_overample, ntree = 10, ...)
rf.fit <- randomForest(y ~ ., data = pos_neg_overample, ntree = 10)
# Fixing the issue by adding a character to the column names except response
colnames(pos_neg_overample)[-y] <- paste0( "V", colnames(pos_neg_overample)[-y])
response_col <- which(colnames(pos_neg_overample) == "y")
response_col
# Fixing the issue by adding a character to the column names except response
colnames(pos_neg_overample)[-response_col] <- paste0( "V", colnames(pos_neg_overample)[-response_col])
colnames(pos_neg_overample)
#remember that it generates samples of same size as N samples size
sds.default <- syn.strata2(pos_neg_overample, method='rf', seed = my.seed, minstratumsize=200, strata=pos_neg_overample$y)
dim(sds.default)
dim(sds.default$predictor.matrix)
sds.default$predictor.matrix
saveRDS(sds.default, "synthProp_seed_7.rds")
synthProp_seed_7 <- readRDS("synthProp_seed_7.rds")
synthProp_seed_7$predictor.matrix
